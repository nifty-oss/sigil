/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStringDecoder,
  getStringEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';
import { MintSeeds, findMintPda } from '../pdas';
import { Tag, TagArgs, getTagDecoder, getTagEncoder } from '../types';

export type Mint<TAddress extends string = string> = Account<
  MintAccountData,
  TAddress
>;

export type MaybeMint<TAddress extends string = string> = MaybeAccount<
  MintAccountData,
  TAddress
>;

export type MintAccountData = {
  tag: Tag;
  bump: number;
  decimals: number;
  empty: number;
  ticker: string;
  authority: Address;
  supply: bigint;
  maxSupply: bigint;
};

export type MintAccountDataArgs = {
  tag: TagArgs;
  bump: number;
  decimals: number;
  empty: number;
  ticker: string;
  authority: Address;
  supply: number | bigint;
  maxSupply: number | bigint;
};

export function getMintAccountDataEncoder(): Encoder<MintAccountDataArgs> {
  return getStructEncoder([
    ['tag', getTagEncoder()],
    ['bump', getU8Encoder()],
    ['decimals', getU8Encoder()],
    ['empty', getU8Encoder()],
    ['ticker', getStringEncoder({ size: 4 })],
    ['authority', getAddressEncoder()],
    ['supply', getU64Encoder()],
    ['maxSupply', getU64Encoder()],
  ]);
}

export function getMintAccountDataDecoder(): Decoder<MintAccountData> {
  return getStructDecoder([
    ['tag', getTagDecoder()],
    ['bump', getU8Decoder()],
    ['decimals', getU8Decoder()],
    ['empty', getU8Decoder()],
    ['ticker', getStringDecoder({ size: 4 })],
    ['authority', getAddressDecoder()],
    ['supply', getU64Decoder()],
    ['maxSupply', getU64Decoder()],
  ]);
}

export function getMintAccountDataCodec(): Codec<
  MintAccountDataArgs,
  MintAccountData
> {
  return combineCodec(getMintAccountDataEncoder(), getMintAccountDataDecoder());
}

export function decodeMint<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Mint<TAddress>;
export function decodeMint<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeMint<TAddress>;
export function decodeMint<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Mint<TAddress> | MaybeMint<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMintAccountDataDecoder()
  );
}

export async function fetchMint<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Mint<TAddress>> {
  const maybeAccount = await fetchMaybeMint(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMint<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeMint<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMint(maybeAccount);
}

export async function fetchAllMint(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Mint[]> {
  const maybeAccounts = await fetchAllMaybeMint(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMint(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeMint[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMint(maybeAccount));
}

export function getMintSize(): number {
  return 56;
}

export async function fetchMintFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Mint> {
  const maybeAccount = await fetchMaybeMintFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMintFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MintSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeMint> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMintPda(seeds, { programAddress });
  return await fetchMaybeMint(rpc, address, fetchConfig);
}
