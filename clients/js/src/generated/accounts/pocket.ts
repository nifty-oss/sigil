/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';
import { PocketSeeds, findPocketPda } from '../pdas';
import {
  Tag,
  TagArgs,
  Token,
  TokenArgs,
  getTagDecoder,
  getTagEncoder,
  getTokenDecoder,
  getTokenEncoder,
} from '../types';

export type Pocket<TAddress extends string = string> = Account<
  PocketAccountData,
  TAddress
>;

export type MaybePocket<TAddress extends string = string> = MaybeAccount<
  PocketAccountData,
  TAddress
>;

export type PocketAccountData = {
  tag: Tag;
  padding: number;
  authority: Address;
  user: Address;
  tokens: Array<Token>;
};

export type PocketAccountDataArgs = {
  tag: TagArgs;
  padding: number;
  authority: Address;
  user: Address;
  tokens: Array<TokenArgs>;
};

export function getPocketAccountDataEncoder(): Encoder<PocketAccountDataArgs> {
  return getStructEncoder([
    ['tag', getTagEncoder()],
    ['padding', getU8Encoder()],
    ['authority', getAddressEncoder()],
    ['user', getAddressEncoder()],
    ['tokens', getArrayEncoder(getTokenEncoder(), { size: getU16Encoder() })],
  ]);
}

export function getPocketAccountDataDecoder(): Decoder<PocketAccountData> {
  return getStructDecoder([
    ['tag', getTagDecoder()],
    ['padding', getU8Decoder()],
    ['authority', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['tokens', getArrayDecoder(getTokenDecoder(), { size: getU16Decoder() })],
  ]);
}

export function getPocketAccountDataCodec(): Codec<
  PocketAccountDataArgs,
  PocketAccountData
> {
  return combineCodec(
    getPocketAccountDataEncoder(),
    getPocketAccountDataDecoder()
  );
}

export function decodePocket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Pocket<TAddress>;
export function decodePocket<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybePocket<TAddress>;
export function decodePocket<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Pocket<TAddress> | MaybePocket<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPocketAccountDataDecoder()
  );
}

export async function fetchPocket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Pocket<TAddress>> {
  const maybeAccount = await fetchMaybePocket(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePocket<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybePocket<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePocket(maybeAccount);
}

export async function fetchAllPocket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Pocket[]> {
  const maybeAccounts = await fetchAllMaybePocket(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePocket(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybePocket[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePocket(maybeAccount));
}

export function getPocketSize(): number {
  return 68;
}

export async function fetchPocketFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PocketSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Pocket> {
  const maybeAccount = await fetchMaybePocketFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePocketFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PocketSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybePocket> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findPocketPda(seeds, { programAddress });
  return await fetchMaybePocket(rpc, address, fetchConfig);
}
