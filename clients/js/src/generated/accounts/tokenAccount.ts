/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs';
import { TokenAccountSeeds, findTokenAccountPda } from '../pdas';
import {
  Tag,
  TagArgs,
  Tree,
  TreeArgs,
  getTagDecoder,
  getTagEncoder,
  getTreeDecoder,
  getTreeEncoder,
} from '../types';

export type TokenAccount<TAddress extends string = string> = Account<
  TokenAccountAccountData,
  TAddress
>;

export type MaybeTokenAccount<TAddress extends string = string> = MaybeAccount<
  TokenAccountAccountData,
  TAddress
>;

export type TokenAccountAccountData = {
  tag: Tag;
  empty: Array<number>;
  authority: Address;
  user: Address;
  tree: Tree;
};

export type TokenAccountAccountDataArgs = {
  tag: TagArgs;
  empty: Array<number>;
  authority: Address;
  user: Address;
  tree: TreeArgs;
};

export function getTokenAccountAccountDataEncoder(): Encoder<TokenAccountAccountDataArgs> {
  return getStructEncoder([
    ['tag', getTagEncoder()],
    ['empty', getArrayEncoder(getU8Encoder(), { size: 3 })],
    ['authority', getAddressEncoder()],
    ['user', getAddressEncoder()],
    ['tree', getTreeEncoder()],
  ]);
}

export function getTokenAccountAccountDataDecoder(): Decoder<TokenAccountAccountData> {
  return getStructDecoder([
    ['tag', getTagDecoder()],
    ['empty', getArrayDecoder(getU8Decoder(), { size: 3 })],
    ['authority', getAddressDecoder()],
    ['user', getAddressDecoder()],
    ['tree', getTreeDecoder()],
  ]);
}

export function getTokenAccountAccountDataCodec(): Codec<
  TokenAccountAccountDataArgs,
  TokenAccountAccountData
> {
  return combineCodec(
    getTokenAccountAccountDataEncoder(),
    getTokenAccountAccountDataDecoder()
  );
}

export function decodeTokenAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): TokenAccount<TAddress>;
export function decodeTokenAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeTokenAccount<TAddress>;
export function decodeTokenAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): TokenAccount<TAddress> | MaybeTokenAccount<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getTokenAccountAccountDataDecoder()
  );
}

export async function fetchTokenAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<TokenAccount<TAddress>> {
  const maybeAccount = await fetchMaybeTokenAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeTokenAccount<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeTokenAccount(maybeAccount);
}

export async function fetchAllTokenAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<TokenAccount[]> {
  const maybeAccounts = await fetchAllMaybeTokenAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeTokenAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeTokenAccount[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeTokenAccount(maybeAccount));
}

export async function fetchTokenAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<TokenAccount> {
  const maybeAccount = await fetchMaybeTokenAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeTokenAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: TokenAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeTokenAccount> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findTokenAccountPda(seeds, { programAddress });
  return await fetchMaybeTokenAccount(rpc, address, fetchConfig);
}
