/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { SIGIL_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type BurnInstruction<
  TProgram extends string = typeof SIGIL_PROGRAM_ADDRESS,
  TAccountTokenAccount extends string | IAccountMeta<string> = string,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTokenAccount extends string
        ? WritableAccount<TAccountTokenAccount>
        : TAccountTokenAccount,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      ...TRemainingAccounts,
    ]
  >;

export type BurnInstructionData = { discriminator: number; amount: number };

export type BurnInstructionDataArgs = { amount: number };

export function getBurnInstructionDataEncoder(): Encoder<BurnInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['amount', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getBurnInstructionDataDecoder(): Decoder<BurnInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['amount', getU32Decoder()],
  ]);
}

export function getBurnInstructionDataCodec(): Codec<
  BurnInstructionDataArgs,
  BurnInstructionData
> {
  return combineCodec(
    getBurnInstructionDataEncoder(),
    getBurnInstructionDataDecoder()
  );
}

export type BurnInput<
  TAccountTokenAccount extends string = string,
  TAccountMint extends string = string,
  TAccountUser extends string = string,
> = {
  /** The token authority account. */
  tokenAccount: Address<TAccountTokenAccount>;
  /** The mint account PDA derived from the ticker and authority. */
  mint: Address<TAccountMint>;
  /** The user of the token account */
  user: TransactionSigner<TAccountUser>;
  amount: BurnInstructionDataArgs['amount'];
};

export function getBurnInstruction<
  TAccountTokenAccount extends string,
  TAccountMint extends string,
  TAccountUser extends string,
>(
  input: BurnInput<TAccountTokenAccount, TAccountMint, TAccountUser>
): BurnInstruction<
  typeof SIGIL_PROGRAM_ADDRESS,
  TAccountTokenAccount,
  TAccountMint,
  TAccountUser
> {
  // Program address.
  const programAddress = SIGIL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tokenAccount: { value: input.tokenAccount ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tokenAccount),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.user),
    ],
    programAddress,
    data: getBurnInstructionDataEncoder().encode(
      args as BurnInstructionDataArgs
    ),
  } as BurnInstruction<
    typeof SIGIL_PROGRAM_ADDRESS,
    TAccountTokenAccount,
    TAccountMint,
    TAccountUser
  >;

  return instruction;
}

export type ParsedBurnInstruction<
  TProgram extends string = typeof SIGIL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The token authority account. */
    tokenAccount: TAccountMetas[0];
    /** The mint account PDA derived from the ticker and authority. */
    mint: TAccountMetas[1];
    /** The user of the token account */
    user: TAccountMetas[2];
  };
  data: BurnInstructionData;
};

export function parseBurnInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedBurnInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tokenAccount: getNextAccount(),
      mint: getNextAccount(),
      user: getNextAccount(),
    },
    data: getBurnInstructionDataDecoder().decode(instruction.data),
  };
}
