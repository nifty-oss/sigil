/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { TOKEN_LITE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type CloseMintInstruction<
  TProgram extends string = typeof TOKEN_LITE_PROGRAM_ADDRESS,
  TAccountMint extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountRecipient extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountAuthority extends string
        ? WritableSignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountRecipient extends string
        ? WritableSignerAccount<TAccountRecipient> &
            IAccountSignerMeta<TAccountRecipient>
        : TAccountRecipient,
      ...TRemainingAccounts,
    ]
  >;

export type CloseMintInstructionData = { discriminator: number };

export type CloseMintInstructionDataArgs = {};

export function getCloseMintInstructionDataEncoder(): Encoder<CloseMintInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([['discriminator', getU8Encoder()]]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getCloseMintInstructionDataDecoder(): Decoder<CloseMintInstructionData> {
  return getStructDecoder([['discriminator', getU8Decoder()]]);
}

export function getCloseMintInstructionDataCodec(): Codec<
  CloseMintInstructionDataArgs,
  CloseMintInstructionData
> {
  return combineCodec(
    getCloseMintInstructionDataEncoder(),
    getCloseMintInstructionDataDecoder()
  );
}

export type CloseMintInput<
  TAccountMint extends string = string,
  TAccountAuthority extends string = string,
  TAccountRecipient extends string = string,
> = {
  /** The mint account PDA derived from the ticker and authority. */
  mint: Address<TAccountMint>;
  /** The authority for the mint. */
  authority: TransactionSigner<TAccountAuthority>;
  /** The account receiving refunded rent SOL. */
  recipient?: TransactionSigner<TAccountRecipient>;
};

export function getCloseMintInstruction<
  TAccountMint extends string,
  TAccountAuthority extends string,
  TAccountRecipient extends string,
>(
  input: CloseMintInput<TAccountMint, TAccountAuthority, TAccountRecipient>
): CloseMintInstruction<
  typeof TOKEN_LITE_PROGRAM_ADDRESS,
  TAccountMint,
  TAccountAuthority,
  TAccountRecipient
> {
  // Program address.
  const programAddress = TOKEN_LITE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    mint: { value: input.mint ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: true },
    recipient: { value: input.recipient ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.recipient),
    ],
    programAddress,
    data: getCloseMintInstructionDataEncoder().encode({}),
  } as CloseMintInstruction<
    typeof TOKEN_LITE_PROGRAM_ADDRESS,
    TAccountMint,
    TAccountAuthority,
    TAccountRecipient
  >;

  return instruction;
}

export type ParsedCloseMintInstruction<
  TProgram extends string = typeof TOKEN_LITE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The mint account PDA derived from the ticker and authority. */
    mint: TAccountMetas[0];
    /** The authority for the mint. */
    authority: TAccountMetas[1];
    /** The account receiving refunded rent SOL. */
    recipient?: TAccountMetas[2] | undefined;
  };
  data: CloseMintInstructionData;
};

export function parseCloseMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCloseMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TOKEN_LITE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      mint: getNextAccount(),
      authority: getNextAccount(),
      recipient: getNextOptionalAccount(),
    },
    data: getCloseMintInstructionDataDecoder().decode(instruction.data),
  };
}
