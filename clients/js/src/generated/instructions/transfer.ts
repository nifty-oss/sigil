/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { TOKEN_LITE_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type TransferInstruction<
  TProgram extends string = typeof TOKEN_LITE_PROGRAM_ADDRESS,
  TAccountUserTokenAccount extends string | IAccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountUserTokenAccount extends string
        ? WritableAccount<TAccountUserTokenAccount>
        : TAccountUserTokenAccount,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TransferInstructionData = {
  discriminator: number;
  ticker: Array<number>;
  amount: number;
};

export type TransferInstructionDataArgs = {
  ticker: Array<number>;
  amount: number;
};

export function getTransferInstructionDataEncoder(): Encoder<TransferInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['ticker', getArrayEncoder(getU8Encoder(), { size: 4 })],
      ['amount', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 5 })
  );
}

export function getTransferInstructionDataDecoder(): Decoder<TransferInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['ticker', getArrayDecoder(getU8Decoder(), { size: 4 })],
    ['amount', getU32Decoder()],
  ]);
}

export function getTransferInstructionDataCodec(): Codec<
  TransferInstructionDataArgs,
  TransferInstructionData
> {
  return combineCodec(
    getTransferInstructionDataEncoder(),
    getTransferInstructionDataDecoder()
  );
}

export type TransferInput<
  TAccountUserTokenAccount extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountUser extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The token authority account. */
  userTokenAccount: Address<TAccountUserTokenAccount>;
  /** The token authority account. */
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  /** The pubkey of the user associated with the token account */
  user: TransactionSigner<TAccountUser>;
  /** The account paying for the storage fees. */
  payer?: TransactionSigner<TAccountPayer>;
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  ticker: TransferInstructionDataArgs['ticker'];
  amount: TransferInstructionDataArgs['amount'];
};

export function getTransferInstruction<
  TAccountUserTokenAccount extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountUser extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
>(
  input: TransferInput<
    TAccountUserTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountUser,
    TAccountPayer,
    TAccountSystemProgram
  >
): TransferInstruction<
  typeof TOKEN_LITE_PROGRAM_ADDRESS,
  TAccountUserTokenAccount,
  TAccountRecipientTokenAccount,
  TAccountUser,
  TAccountPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = TOKEN_LITE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userTokenAccount: {
      value: input.userTokenAccount ?? null,
      isWritable: true,
    },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    user: { value: input.user ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userTokenAccount),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getTransferInstructionDataEncoder().encode(
      args as TransferInstructionDataArgs
    ),
  } as TransferInstruction<
    typeof TOKEN_LITE_PROGRAM_ADDRESS,
    TAccountUserTokenAccount,
    TAccountRecipientTokenAccount,
    TAccountUser,
    TAccountPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedTransferInstruction<
  TProgram extends string = typeof TOKEN_LITE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The token authority account. */
    userTokenAccount: TAccountMetas[0];
    /** The token authority account. */
    recipientTokenAccount: TAccountMetas[1];
    /** The pubkey of the user associated with the token account */
    user: TAccountMetas[2];
    /** The account paying for the storage fees. */
    payer?: TAccountMetas[3] | undefined;
    /** The system program */
    systemProgram?: TAccountMetas[4] | undefined;
  };
  data: TransferInstructionData;
};

export function parseTransferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTransferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === TOKEN_LITE_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userTokenAccount: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      user: getNextAccount(),
      payer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
    },
    data: getTransferInstructionDataDecoder().decode(instruction.data),
  };
}
