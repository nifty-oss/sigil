/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program } from '@solana/programs';
import {
  ParsedAddTokenInstruction,
  ParsedBurnInstruction,
  ParsedCloseMintInstruction,
  ParsedCreateMintInstruction,
  ParsedCreateTokenAccountInstruction,
  ParsedMintToInstruction,
  ParsedTransferInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const SIGIL_PROGRAM_ADDRESS =
  'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9' as Address<'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9'>;

export type SigilProgram =
  Program<'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9'>;

export function getSigilProgram(): SigilProgram {
  return {
    name: 'sigil',
    address: SIGIL_PROGRAM_ADDRESS,
  };
}

export enum SigilAccount {
  Mint,
  Pocket,
}

export enum SigilInstruction {
  AddToken,
  Burn,
  CloseMint,
  CreateMint,
  CreateTokenAccount,
  MintTo,
  Transfer,
}

export function identifySigilInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): SigilInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return SigilInstruction.AddToken;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return SigilInstruction.Burn;
  }
  if (memcmp(data, getU8Encoder().encode(2), 0)) {
    return SigilInstruction.CloseMint;
  }
  if (memcmp(data, getU8Encoder().encode(3), 0)) {
    return SigilInstruction.CreateMint;
  }
  if (memcmp(data, getU8Encoder().encode(4), 0)) {
    return SigilInstruction.CreateTokenAccount;
  }
  if (memcmp(data, getU8Encoder().encode(5), 0)) {
    return SigilInstruction.MintTo;
  }
  if (memcmp(data, getU8Encoder().encode(6), 0)) {
    return SigilInstruction.Transfer;
  }
  throw new Error(
    'The provided instruction could not be identified as a sigil instruction.'
  );
}

export type ParsedSigilInstruction<
  TProgram extends string = 'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9',
> =
  | ({
      instructionType: SigilInstruction.AddToken;
    } & ParsedAddTokenInstruction<TProgram>)
  | ({
      instructionType: SigilInstruction.Burn;
    } & ParsedBurnInstruction<TProgram>)
  | ({
      instructionType: SigilInstruction.CloseMint;
    } & ParsedCloseMintInstruction<TProgram>)
  | ({
      instructionType: SigilInstruction.CreateMint;
    } & ParsedCreateMintInstruction<TProgram>)
  | ({
      instructionType: SigilInstruction.CreateTokenAccount;
    } & ParsedCreateTokenAccountInstruction<TProgram>)
  | ({
      instructionType: SigilInstruction.MintTo;
    } & ParsedMintToInstruction<TProgram>)
  | ({
      instructionType: SigilInstruction.Transfer;
    } & ParsedTransferInstruction<TProgram>);
