/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  SigilProgramProgramError,
  SigilProgramProgramErrorCode,
  getSigilProgramProgramErrorFromCode,
} from '../errors';
import {
  ParsedAddTokenInstruction,
  ParsedBurnInstruction,
  ParsedCloseMintInstruction,
  ParsedCreateMintInstruction,
  ParsedCreateTokenAccountInstruction,
  ParsedMintToInstruction,
  ParsedTransferInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const SIGIL_PROGRAM_PROGRAM_ADDRESS =
  'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9' as Address<'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9'>;

export type SigilProgramProgram =
  Program<'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9'> &
    ProgramWithErrors<SigilProgramProgramErrorCode, SigilProgramProgramError>;

export function getSigilProgramProgram(): SigilProgramProgram {
  return {
    name: 'sigilProgram',
    address: SIGIL_PROGRAM_PROGRAM_ADDRESS,
    getErrorFromCode(code: SigilProgramProgramErrorCode, cause?: Error) {
      return getSigilProgramProgramErrorFromCode(code, cause);
    },
  };
}

export enum SigilProgramAccount {
  Mint,
  TokenAccount,
}

export enum SigilProgramInstruction {
  AddToken,
  Burn,
  CloseMint,
  CreateMint,
  CreateTokenAccount,
  MintTo,
  Transfer,
}

export function identifySigilProgramInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): SigilProgramInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return SigilProgramInstruction.AddToken;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return SigilProgramInstruction.Burn;
  }
  if (memcmp(data, getU8Encoder().encode(2), 0)) {
    return SigilProgramInstruction.CloseMint;
  }
  if (memcmp(data, getU8Encoder().encode(3), 0)) {
    return SigilProgramInstruction.CreateMint;
  }
  if (memcmp(data, getU8Encoder().encode(4), 0)) {
    return SigilProgramInstruction.CreateTokenAccount;
  }
  if (memcmp(data, getU8Encoder().encode(5), 0)) {
    return SigilProgramInstruction.MintTo;
  }
  if (memcmp(data, getU8Encoder().encode(6), 0)) {
    return SigilProgramInstruction.Transfer;
  }
  throw new Error(
    'The provided instruction could not be identified as a sigilProgram instruction.'
  );
}

export type ParsedSigilProgramInstruction<
  TProgram extends string = 'BpPMgxYawb8Qiguavj3JccMdp7bTZWemSqJmDeYTsTD9',
> =
  | ({
      instructionType: SigilProgramInstruction.AddToken;
    } & ParsedAddTokenInstruction<TProgram>)
  | ({
      instructionType: SigilProgramInstruction.Burn;
    } & ParsedBurnInstruction<TProgram>)
  | ({
      instructionType: SigilProgramInstruction.CloseMint;
    } & ParsedCloseMintInstruction<TProgram>)
  | ({
      instructionType: SigilProgramInstruction.CreateMint;
    } & ParsedCreateMintInstruction<TProgram>)
  | ({
      instructionType: SigilProgramInstruction.CreateTokenAccount;
    } & ParsedCreateTokenAccountInstruction<TProgram>)
  | ({
      instructionType: SigilProgramInstruction.MintTo;
    } & ParsedMintToInstruction<TProgram>)
  | ({
      instructionType: SigilProgramInstruction.Transfer;
    } & ParsedTransferInstruction<TProgram>);
